# def foo(x,y,z,*args,**kwargs):
#     print(x,y,z)
#     print(*args)
#     print(**kwargs)

# foo(1, 2, 3, 10, 12, 14, name = "Olga", age = 14)


# -------------------------------------------------------------------------------------------------

# x = 3
# def foo():
#     x=5 # внутри функции переменные имеют локальную область видимости.
#     # то есть внутри функции изменить значение переменной нельзя таким образом
# foo()
# print(x)

# x = 3
# def foo():
#     global x # теперь переменную мы сделали глобальной, и она меняется вне функции
#     x=5

# foo()
# print(x)

# -------------------------------------------------------------------------------------------------

# Рекурсия - это когда функция вызывает саму себя

# # Задача 1 - нам нужно число 2 n раз возвести во вторую степень:
# # При создании рекурсии важно определить точку выхода из рекурсии!
# def recr(cnt, res):
#     if cnt == 0:
#         return res
#     return recr(cnt-1, res*2) # каждое повторение уменьшает каунт на единицу, а результат *2
# #   в месте вызова функции также надо написать return
# # Вот что будет происходить последовательно при вызове функции:
# #        1    2    3    4    5     6
# # cnt -> 5 -> 4 -> 3 -> 2 -> 1  -> 0
# # res -> 1 -> 2 -> 4 -> 8 -> 16 -> 32
# count = int(input("Введите число: "))
# print(recr(count, 1))


# # Задача 2 - нам нужно вывести самое вложенное значение словарей, если не известно, сколько их:
# def recr(dictionary):
#     for val in dictionary.values():
#         if type(val) == dict:
#             return recr(val)
#         else:
#             return val
        
# dct = {1: {2: {3: {4: {5: "Hello"}}}}}
# print(recr(dct))



